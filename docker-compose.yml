
services:
  db:
    image: postgres:latest
    # ports:
    #   - "${POSTGRES_PORT}:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}'"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - postgres_data:/var/lib/postgresql/data
    network_mode: host
  
  redis:
    image: redis:latest
    network_mode: host
  
  # mysql:
  #   image: mysql/mysql-server
  #   restart: unless-stopped
  #   ports:
  #     - 3306:3306
  #   environment:
  #     MYSQL_ROOT_PASSWORD: root_pass
  #     MYSQL_DATABASE: gorse
  #     MYSQL_USER: gorse
  #     MYSQL_PASSWORD: gorse_pass
  
  # gorse:
  #   image: zhenghaoz/gorse-in-one
  #   ports:
  #     - 8086:8086   # gRPC port
  #     - 8088:8088   # HTTP port
  #   environment:
  #     # Use Redis as cache storage backend.
  #     GORSE_CACHE_STORE: redis://localhost:6379/0
  #     # Use PostgresSQL as data storage backend.
  #     GORSE_DATA_STORE: mysql://gorse:gorse_pass@tcp(mysql:3306)/gorse?parseTime=true
  #   command: >
  #     -c /etc/gorse/config.toml 
  #     --log-path /var/log/gorse/master.log 
  #     --cache-path /var/lib/gorse/master_cache.data
  #   volumes:
  #     # Mount the configuration file.
  #     - ./config.toml:/etc/gorse/config.toml
  #   depends_on:
  #     redis:
  #       condition: service_started
  #     mysql:
  #       condition: service_healthy

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    volumes:
      - /root/youtube-clone/media:/var/html/media
      - /root/youtube-clone/dash-script:/var/html
    # volumes:
    #   - ./backend:/app #bind mounting
    # ports:
    #   - "5000:5000"
    env_file:
      - ./backend/.env
    environment:
      - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@127.0.0.1:5432/${POSTGRES_DB}
    network_mode: host
    depends_on:
      db:
        condition: service_healthy

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    volumes:
      - /root/youtube-clone/media:/var/html/media

    #   - ./frontend:/app
    # ports:
    #   - "5173:5173"
    network_mode: host
  recommendation:
    build:
      context: ./flask
      dockerfile: Dockerfile
    depends_on:
      db:
        condition: service_healthy
    network_mode: host

  nginx:
    image: nginx:latest
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - /root/youtube-clone/media:/var/html/media
      - /root/youtube-clone/dash-script:/root/youtube-media/dash-script
      - /etc/letsencrypt:/etc/letsencrypt
    network_mode: host
    depends_on:
      - frontend
      - backend

#docker compose can automatically load .env file locally as long as on same directory

volumes:
  postgres_data: #declares a volume 